(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{476:function(e,v,_){"use strict";_.r(v);var l=_(15),t=Object(l.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h2",{attrs:{id:"引用数据类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#引用数据类型"}},[e._v("#")]),e._v(" 引用数据类型")]),e._v(" "),_("ul",[_("li",[e._v("Object")]),e._v(" "),_("li",[e._v("Array")]),e._v(" "),_("li",[e._v("Function")]),e._v(" "),_("li",[e._v("Date")]),e._v(" "),_("li",[e._v("Math")]),e._v(" "),_("li",[e._v("正则RegExp")]),e._v(" "),_("li",[e._v("Set: ES6，类似数组，但成员值都是唯一的。\n"),_("ul",[_("li",[e._v("添加成员："),_("code",[e._v("const s = new Set(); s.add('a')")]),e._v("，返回Set结构本身")]),e._v(" "),_("li",[e._v("delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。")]),e._v(" "),_("li",[e._v("has(value)：返回一个布尔值，表示该值是否为Set的成员。")]),e._v(" "),_("li",[e._v("clear()：清除所有成员，没有返回值。")]),e._v(" "),_("li",[e._v("长度："),_("code",[e._v("const s = new Set([1,2,3]); s.size")])]),e._v(" "),_("li",[e._v("Set对象的key和value是一样的，都是成员值，所以"),_("code",[e._v("keys()")]),e._v(" 和"),_("code",[e._v("values()")]),e._v("返回一样")]),e._v(" "),_("li",[e._v("WeakSet: Set的一种衍生，区别在于：成员只能是对象；是个弱引用，无法遍历")])])]),e._v(" "),_("li",[e._v("Map：ES6，类似对象，区别在于key值不限于字符串，可以是任意类型的值，比如对象，函数等等\n"),_("ul",[_("li",[e._v("set(key, value)")]),e._v(" "),_("li",[e._v("get(key): key为对象时，由于对象永远不等，所以看着key值一样，但也是不同的")]),e._v(" "),_("li",[e._v("delete(key)")]),e._v(" "),_("li",[e._v("has(key)")]),e._v(" "),_("li",[e._v("clear()")]),e._v(" "),_("li",[e._v("size属性")]),e._v(" "),_("li",[e._v("WeakMap: Map的一种衍生，区别在于：是个弱引用，作用于DOM操作，防止内存泄漏")])])])])])}),[],!1,null,null,null);v.default=t.exports}}]);